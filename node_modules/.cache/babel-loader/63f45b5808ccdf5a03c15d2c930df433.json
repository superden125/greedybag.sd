{"ast":null,"code":"var _jsxFileName = \"/home/sd/HK1-2020-2021/NLCS/balo/demo2/src/components/Items/InputFile.js\";\nimport React, { useRef } from \"react\";\nimport classNames from \"classnames\";\nimport * as XLSX from \"xlsx\";\nimport * as FileSaver from \"file-saver\";\nimport { FormGroup, Input, Label, Button } from \"reactstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nexport default function InputFile(props) {\n  const {\n    setFileName,\n    fileNames,\n    setIsLoading,\n    setInputFile,\n    file,\n    setFile,\n    items,\n    isGreedy,\n    disabled\n  } = props;\n  const fileUpload = React.useRef(null);\n\n  const getExtFile = filename => {\n    let last_dot = filename.lastIndexOf(\".\");\n    return filename.slice(last_dot + 1);\n  };\n\n  const readFileTxt = reader => {\n    const items = [];\n\n    reader.onload = async e => {\n      setIsLoading(true);\n      console.log(\"load\");\n      const text = e.target.result.split(/\\r\\n|\\n/);\n      let weight = parseInt(text[0]);\n      text.forEach((line, index) => {\n        //console.log(line);\n        if (index !== 0) {\n          const cell = line.split(\" \");\n          const stock = cell[2] % 1 === 0 ? cell[2] : \"\";\n          let name = \"\";\n\n          if (stock !== \"\") {\n            cell.slice(3).forEach(t => {\n              name += t + \" \";\n            });\n          } else {\n            cell.slice(2).forEach(t => {\n              name += t + \" \";\n            });\n          }\n\n          items.push({\n            name: name.trim(),\n            value: cell[0],\n            weight: cell[1],\n            stock: stock,\n            qty: \"\",\n            time: \"\"\n          });\n        }\n      });\n      console.log(items);\n      setInputFile(weight, items);\n      setIsLoading(false);\n    }; //reader.readAsText(e.target.files[0]);\n\n  };\n\n  const readFileXlsx = reader => {\n    const items = [];\n\n    reader.onload = async e => {\n      setIsLoading(true);\n      /* Parse data */\n\n      const bstr = e.target.result;\n      const wb = XLSX.read(bstr, {\n        type: \"binary\"\n      });\n      /* Get first worksheet */\n\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n\n      const data = XLSX.utils.sheet_to_json(ws, {\n        header: 1\n      });\n      /* Update state */\n\n      console.log(data);\n\n      for (let i = 1; i < data.length; i++) {\n        items.push({\n          name: data[i][0].trim(),\n          value: data[i][1],\n          weight: data[i][2],\n          stock: data[i][3] % 1 === 0 ? data[i][3] : \"\",\n          qty: \"\",\n          time: \"\"\n        });\n      }\n\n      setInputFile(0, items);\n      setIsLoading(false);\n    };\n  };\n\n  const readFile = e => {\n    if (e !== undefined) {\n      if (e.target.files[0] !== undefined) {\n        e.preventDefault();\n        const items = [];\n        const reader = new FileReader();\n        let ext = getExtFile(e.target.files[0].name);\n        setFileName(e.target.files[0].name);\n        setFile(e.target.value);\n\n        switch (ext) {\n          case \"txt\":\n            readFileTxt(reader);\n            break;\n\n          case \"xlsx\":\n            readFileXlsx(reader);\n            break;\n        }\n\n        ext === \"xlsx\" && reader.readAsBinaryString(e.target.files[0]);\n        ext === \"txt\" && reader.readAsText(e.target.files[0]);\n      }\n    }\n  };\n\n  const exportToCSV = (csvData, fileName) => {\n    csvData.unshift({\n      InputWeight: \"test\"\n    });\n    console.log(csvData);\n    const fileType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n    const fileExtension = \".xlsx\";\n    const ws = XLSX.utils.json_to_sheet(csvData);\n    console.log(ws);\n    const wb = {\n      Sheets: {\n        data: ws\n      },\n      SheetNames: [\"data\"]\n    };\n    const excelBuffer = XLSX.write(wb, {\n      bookType: \"xlsx\",\n      type: \"array\"\n    });\n    const data = new Blob([excelBuffer], {\n      type: fileType\n    }); //FileSaver.saveAs(data, fileName + fileExtension);\n  };\n\n  return /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"legend\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }, \"File\"), /*#__PURE__*/React.createElement(Label, {\n    for: \"file\",\n    className: classNames(\"sd-file-choose sd-btn btn btn-primary\", {\n      disabled: disabled\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sd-file-upload\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: \"file-upload\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }\n  }), \"Upload\")), /*#__PURE__*/React.createElement(Input, {\n    type: \"file\",\n    name: \"file\",\n    id: \"file\",\n    onChange: e => readFile(e),\n    style: {\n      display: \"none\"\n    },\n    value: file,\n    disabled: disabled,\n    ref: fileUpload,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }\n  }, fileNames), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: \"sd-file-choose sd-btn btn btn-danger\",\n    onClick: () => exportToCSV(items, \"result\"),\n    disabled: !isGreedy,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: \"file-download\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }\n  }), \"Export\"));\n}","map":{"version":3,"sources":["/home/sd/HK1-2020-2021/NLCS/balo/demo2/src/components/Items/InputFile.js"],"names":["React","useRef","classNames","XLSX","FileSaver","FormGroup","Input","Label","Button","FontAwesomeIcon","InputFile","props","setFileName","fileNames","setIsLoading","setInputFile","file","setFile","items","isGreedy","disabled","fileUpload","getExtFile","filename","last_dot","lastIndexOf","slice","readFileTxt","reader","onload","e","console","log","text","target","result","split","weight","parseInt","forEach","line","index","cell","stock","name","t","push","trim","value","qty","time","readFileXlsx","bstr","wb","read","type","wsname","SheetNames","ws","Sheets","data","utils","sheet_to_json","header","i","length","readFile","undefined","files","preventDefault","FileReader","ext","readAsBinaryString","readAsText","exportToCSV","csvData","fileName","unshift","InputWeight","fileType","fileExtension","json_to_sheet","excelBuffer","write","bookType","Blob","display"],"mappings":"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","sourcesContent":["import React, { useRef } from \"react\";\nimport classNames from \"classnames\";\nimport * as XLSX from \"xlsx\";\nimport * as FileSaver from \"file-saver\";\nimport { FormGroup, Input, Label, Button } from \"reactstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nexport default function InputFile(props) {\n  const {\n    setFileName,\n    fileNames,\n    setIsLoading,\n    setInputFile,\n    file,\n    setFile,\n    items,\n    isGreedy,\n    disabled,\n  } = props;\n\n  const fileUpload = React.useRef(null);\n\n  const getExtFile = (filename) => {\n    let last_dot = filename.lastIndexOf(\".\");\n    return filename.slice(last_dot + 1);\n  };\n\n  const readFileTxt = (reader) => {\n    const items = [];\n\n    reader.onload = async (e) => {\n      setIsLoading(true);\n      console.log(\"load\");\n      const text = e.target.result.split(/\\r\\n|\\n/);\n      let weight = parseInt(text[0]);\n      text.forEach((line, index) => {\n        //console.log(line);\n        if (index !== 0) {\n          const cell = line.split(\" \");\n\n          const stock = cell[2] % 1 === 0 ? cell[2] : \"\";\n          let name = \"\";\n          if (stock !== \"\") {\n            cell.slice(3).forEach((t) => {\n              name += t + \" \";\n            });\n          } else {\n            cell.slice(2).forEach((t) => {\n              name += t + \" \";\n            });\n          }\n          items.push({\n            name: name.trim(),\n            value: cell[0],\n            weight: cell[1],\n            stock: stock,\n            qty: \"\",\n            time: \"\",\n          });\n        }\n      });\n      console.log(items);\n      setInputFile(weight, items);\n\n      setIsLoading(false);\n    };\n    //reader.readAsText(e.target.files[0]);\n  };\n\n  const readFileXlsx = (reader) => {\n    const items = [];\n    reader.onload = async (e) => {\n      setIsLoading(true);\n\n      /* Parse data */\n      const bstr = e.target.result;\n      const wb = XLSX.read(bstr, { type: \"binary\" });\n      /* Get first worksheet */\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n      const data = XLSX.utils.sheet_to_json(ws, { header: 1 });\n      /* Update state */\n      console.log(data);\n\n      for (let i = 1; i < data.length; i++) {\n        items.push({\n          name: data[i][0].trim(),\n          value: data[i][1],\n          weight: data[i][2],\n          stock: data[i][3] % 1 === 0 ? data[i][3] : \"\",\n          qty: \"\",\n          time: \"\",\n        });\n      }\n      setInputFile(0, items);\n      setIsLoading(false);\n    };\n  };\n\n  const readFile = (e) => {\n    if (e !== undefined) {\n      if (e.target.files[0] !== undefined) {\n        e.preventDefault();\n        const items = [];\n        const reader = new FileReader();\n        let ext = getExtFile(e.target.files[0].name);\n        setFileName(e.target.files[0].name);\n        setFile(e.target.value);\n\n        switch (ext) {\n          case \"txt\":\n            readFileTxt(reader);\n            break;\n\n          case \"xlsx\":\n            readFileXlsx(reader);\n            break;\n        }\n\n        ext === \"xlsx\" && reader.readAsBinaryString(e.target.files[0]);\n        ext === \"txt\" && reader.readAsText(e.target.files[0]);\n      }\n    }\n  };\n\n  const exportToCSV = (csvData, fileName) => {\n    csvData.unshift({ InputWeight: \"test\" });\n    console.log(csvData);\n    const fileType =\n      \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n    const fileExtension = \".xlsx\";\n    const ws = XLSX.utils.json_to_sheet(csvData);\n    console.log(ws);\n    const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n    const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\n    const data = new Blob([excelBuffer], { type: fileType });\n    //FileSaver.saveAs(data, fileName + fileExtension);\n  };\n\n  return (\n    <FormGroup>\n      <legend>File</legend>\n      <Label\n        for=\"file\"\n        className={classNames(\"sd-file-choose sd-btn btn btn-primary\", {\n          disabled: disabled,\n        })}\n      >\n        <span className=\"sd-file-upload\">\n          <FontAwesomeIcon icon=\"file-upload\" />\n          Upload\n        </span>\n      </Label>\n\n      <Input\n        type=\"file\"\n        name=\"file\"\n        id=\"file\"\n        onChange={(e) => readFile(e)}\n        style={{ display: \"none\" }}\n        value={file}\n        disabled={disabled}\n        ref={fileUpload}\n      />\n      <br></br>\n      <Label>{fileNames}</Label>\n      <br />\n      <Button\n        className=\"sd-file-choose sd-btn btn btn-danger\"\n        onClick={() => exportToCSV(items, \"result\")}\n        disabled={!isGreedy}\n      >\n        <FontAwesomeIcon icon=\"file-download\" />\n        Export\n      </Button>\n    </FormGroup>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}