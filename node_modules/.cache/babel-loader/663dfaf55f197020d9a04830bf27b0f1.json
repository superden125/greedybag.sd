{"ast":null,"code":"var _jsxFileName = \"/home/sd/HK1-2020-2021/NLCS/balo/demo2/src/components/Items/InputFile.js\";\nimport React from \"react\";\nimport { Input, UncontrolledDropdown } from \"reactstrap\";\nexport default function InputFile(props) {\n  const {\n    setWeightFile,\n    setItemsFile\n  } = props;\n\n  const readFile = e => {\n    if (e != undefined && e.target.files[0] !== null && e.target.files[0].size > 0) {\n      e.preventDefault();\n      const items = [];\n      const reader = new FileReader();\n\n      reader.onload = async e => {\n        const text = e.target.result.split(/\\r\\n|\\n/);\n        setWeightFile(parseInt(text[0]));\n        text.forEach((line, index) => {\n          //console.log(line);\n          if (index !== 0) {\n            const cell = line.split(\" \");\n            const stock = cell[2] % 1 === 0 ? cell[2] : \"\";\n            let name = \"\";\n\n            if (stock !== \"\") {\n              cell.slice(3).forEach(t => {\n                name += t + \" \";\n              });\n            } else {\n              cell.slice(2).forEach(t => {\n                name += t + \" \";\n              });\n            }\n\n            items.push({\n              name: name.trim(),\n              value: cell[0],\n              weight: cell[1],\n              stock: stock,\n              qty: \"\",\n              time: \"\"\n            });\n          }\n        });\n        setItemsFile(items);\n      };\n\n      reader.readAsText(e.target.files[0]);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"file\",\n    name: \"file\",\n    onChange: e => readFile(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/home/sd/HK1-2020-2021/NLCS/balo/demo2/src/components/Items/InputFile.js"],"names":["React","Input","UncontrolledDropdown","InputFile","props","setWeightFile","setItemsFile","readFile","e","undefined","target","files","size","preventDefault","items","reader","FileReader","onload","text","result","split","parseInt","forEach","line","index","cell","stock","name","slice","t","push","trim","value","weight","qty","time","readAsText"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,oBAAhB,QAA4C,YAA5C;AAEA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACvC,QAAM;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,MAAkCF,KAAxC;;AAEA,QAAMG,QAAQ,GAAIC,CAAD,IAAO;AACtB,QACEA,CAAC,IAAIC,SAAL,IACAD,CAAC,CAACE,MAAF,CAASC,KAAT,CAAe,CAAf,MAAsB,IADtB,IAEAH,CAAC,CAACE,MAAF,CAASC,KAAT,CAAe,CAAf,EAAkBC,IAAlB,GAAyB,CAH3B,EAIE;AACAJ,MAAAA,CAAC,CAACK,cAAF;AACA,YAAMC,KAAK,GAAG,EAAd;AACA,YAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AAEAD,MAAAA,MAAM,CAACE,MAAP,GAAgB,MAAOT,CAAP,IAAa;AAC3B,cAAMU,IAAI,GAAGV,CAAC,CAACE,MAAF,CAASS,MAAT,CAAgBC,KAAhB,CAAsB,SAAtB,CAAb;AACAf,QAAAA,aAAa,CAACgB,QAAQ,CAACH,IAAI,CAAC,CAAD,CAAL,CAAT,CAAb;AACAA,QAAAA,IAAI,CAACI,OAAL,CAAa,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC5B;AACA,cAAIA,KAAK,KAAK,CAAd,EAAiB;AACf,kBAAMC,IAAI,GAAGF,IAAI,CAACH,KAAL,CAAW,GAAX,CAAb;AAEA,kBAAMM,KAAK,GAAGD,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAV,KAAgB,CAAhB,GAAoBA,IAAI,CAAC,CAAD,CAAxB,GAA8B,EAA5C;AACA,gBAAIE,IAAI,GAAG,EAAX;;AACA,gBAAID,KAAK,KAAK,EAAd,EAAkB;AAChBD,cAAAA,IAAI,CAACG,KAAL,CAAW,CAAX,EAAcN,OAAd,CAAuBO,CAAD,IAAO;AAC3BF,gBAAAA,IAAI,IAAIE,CAAC,GAAG,GAAZ;AACD,eAFD;AAGD,aAJD,MAIO;AACLJ,cAAAA,IAAI,CAACG,KAAL,CAAW,CAAX,EAAcN,OAAd,CAAuBO,CAAD,IAAO;AAC3BF,gBAAAA,IAAI,IAAIE,CAAC,GAAG,GAAZ;AACD,eAFD;AAGD;;AACDf,YAAAA,KAAK,CAACgB,IAAN,CAAW;AACTH,cAAAA,IAAI,EAAEA,IAAI,CAACI,IAAL,EADG;AAETC,cAAAA,KAAK,EAAEP,IAAI,CAAC,CAAD,CAFF;AAGTQ,cAAAA,MAAM,EAAER,IAAI,CAAC,CAAD,CAHH;AAITC,cAAAA,KAAK,EAAEA,KAJE;AAKTQ,cAAAA,GAAG,EAAE,EALI;AAMTC,cAAAA,IAAI,EAAE;AANG,aAAX;AAQD;AACF,SAzBD;AA2BA7B,QAAAA,YAAY,CAACQ,KAAD,CAAZ;AACD,OA/BD;;AAgCAC,MAAAA,MAAM,CAACqB,UAAP,CAAkB5B,CAAC,CAACE,MAAF,CAASC,KAAT,CAAe,CAAf,CAAlB;AACD;AACF,GA5CD;;AA8CA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,MAAxB;AAA+B,IAAA,QAAQ,EAAGH,CAAD,IAAOD,QAAQ,CAACC,CAAD,CAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD","sourcesContent":["import React from \"react\";\nimport { Input, UncontrolledDropdown } from \"reactstrap\";\n\nexport default function InputFile(props) {\n  const { setWeightFile, setItemsFile } = props;\n\n  const readFile = (e) => {\n    if (\n      e != undefined &&\n      e.target.files[0] !== null &&\n      e.target.files[0].size > 0\n    ) {\n      e.preventDefault();\n      const items = [];\n      const reader = new FileReader();\n\n      reader.onload = async (e) => {\n        const text = e.target.result.split(/\\r\\n|\\n/);\n        setWeightFile(parseInt(text[0]));\n        text.forEach((line, index) => {\n          //console.log(line);\n          if (index !== 0) {\n            const cell = line.split(\" \");\n\n            const stock = cell[2] % 1 === 0 ? cell[2] : \"\";\n            let name = \"\";\n            if (stock !== \"\") {\n              cell.slice(3).forEach((t) => {\n                name += t + \" \";\n              });\n            } else {\n              cell.slice(2).forEach((t) => {\n                name += t + \" \";\n              });\n            }\n            items.push({\n              name: name.trim(),\n              value: cell[0],\n              weight: cell[1],\n              stock: stock,\n              qty: \"\",\n              time: \"\",\n            });\n          }\n        });\n\n        setItemsFile(items);\n      };\n      reader.readAsText(e.target.files[0]);\n    }\n  };\n\n  return (\n    <div>\n      <Input type=\"file\" name=\"file\" onChange={(e) => readFile(e)} />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}