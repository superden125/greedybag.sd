{"ast":null,"code":"var _jsxFileName = \"/home/sd/HK1-2020-2021/NLCS/balo/demo2/src/components/Items/InputFile.js\";\nimport React from \"react\";\nimport classNames from \"classnames\";\nimport * as XLSX from \"xlsx\";\nimport { FormGroup, Input, Label } from \"reactstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nexport default function InputFile(props) {\n  const {\n    setFileName,\n    fileNames,\n    setIsLoading,\n    setInputFile,\n    file,\n    setFile,\n    disabled\n  } = props;\n\n  const getExtFile = filename => {\n    let last_dot = filename.lastIndexOf(\".\");\n    return filename.slice(last_dot + 1);\n  };\n\n  const readFile = e => {\n    if (e !== undefined) {\n      if (e.target.files[0] !== undefined) {\n        e.preventDefault();\n        const items = [];\n        const reader = new FileReader();\n        let ext = getExtFile(e.target.files[0].name);\n        setFileName(e.target.files[0].name);\n        setFile(e.target.value);\n\n        reader.onload = async e => {\n          setIsLoading(true);\n          console.log(ext);\n\n          switch (ext) {\n            case \"txt\":\n              console.log(\"text\");\n              const text = e.target.result.split(/\\r\\n|\\n/);\n              let weight = parseInt(text[0]);\n              text.forEach((line, index) => {\n                //console.log(line);\n                if (index !== 0) {\n                  const cell = line.split(\" \");\n                  const stock = cell[2] % 1 === 0 ? cell[2] : \"\";\n                  let name = \"\";\n\n                  if (stock !== \"\") {\n                    cell.slice(3).forEach(t => {\n                      name += t + \" \";\n                    });\n                  } else {\n                    cell.slice(2).forEach(t => {\n                      name += t + \" \";\n                    });\n                  }\n\n                  items.push({\n                    name: name.trim(),\n                    value: cell[0],\n                    weight: cell[1],\n                    stock: stock,\n                    qty: \"\",\n                    time: \"\"\n                  });\n                }\n              });\n              console.log(items);\n              setInputFile(weight, items);\n              break;\n\n            case \"xlsx\":\n              console.log(\"excel\");\n              /* Parse data */\n\n              const bstr = e.target.result;\n              const wb = XLSX.read(bstr, {\n                type: \"binary\"\n              });\n              /* Get first worksheet */\n\n              const wsname = wb.SheetNames[0];\n              const ws = wb.Sheets[wsname];\n              /* Convert array of arrays */\n\n              const data = XLSX.utils.sheet_to_csv(ws, {\n                header: 1\n              });\n              /* Update state */\n\n              console.log(\"Data>>>\" + data);\n              console.log(convertToJson(data)); //setInputFile(0, convertToJson(data));\n\n              break;\n          }\n\n          setIsLoading(false);\n        };\n\n        ext === \"xlsx\" && reader.readAsBinaryString(e.target.files[0]);\n        ext === \"text\" && reader.readAsText(e.target.files[0]);\n      }\n    }\n  };\n\n  const convertToJson = csv => {\n    var lines = csv.split(\"\\n\");\n    var result = [];\n    var headers = lines[0].split(\",\");\n\n    for (var i = 1; i < lines.length; i++) {\n      var obj = {};\n      var currentline = lines[i].split(\",\");\n\n      for (var j = 0; j < headers.length; j++) {\n        obj[headers[j]] = currentline[j];\n      }\n\n      result.push(obj);\n    } //return result; //JavaScript object\n\n\n    return JSON.stringify(result); //JSON\n  };\n\n  return /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"legend\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }, \"File\"), /*#__PURE__*/React.createElement(Label, {\n    for: \"file\" // className=\"sd-file-choose btn btn-primary disabled\"\n    ,\n    className: classNames(\"sd-file-choose btn btn-primary\", {\n      disabled: disabled\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: \"file-upload\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }), \" Upload\"), /*#__PURE__*/React.createElement(Input, {\n    type: \"file\",\n    name: \"file\",\n    id: \"file\",\n    onChange: e => readFile(e),\n    style: {\n      display: \"none\"\n    },\n    value: file,\n    disabled: disabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, fileNames));\n}","map":{"version":3,"sources":["/home/sd/HK1-2020-2021/NLCS/balo/demo2/src/components/Items/InputFile.js"],"names":["React","classNames","XLSX","FormGroup","Input","Label","FontAwesomeIcon","InputFile","props","setFileName","fileNames","setIsLoading","setInputFile","file","setFile","disabled","getExtFile","filename","last_dot","lastIndexOf","slice","readFile","e","undefined","target","files","preventDefault","items","reader","FileReader","ext","name","value","onload","console","log","text","result","split","weight","parseInt","forEach","line","index","cell","stock","t","push","trim","qty","time","bstr","wb","read","type","wsname","SheetNames","ws","Sheets","data","utils","sheet_to_csv","header","convertToJson","readAsBinaryString","readAsText","csv","lines","headers","i","length","obj","currentline","j","JSON","stringify","display"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport classNames from \"classnames\";\nimport * as XLSX from \"xlsx\";\nimport { FormGroup, Input, Label } from \"reactstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nexport default function InputFile(props) {\n  const {\n    setFileName,\n    fileNames,\n    setIsLoading,\n    setInputFile,\n    file,\n    setFile,\n    disabled,\n  } = props;\n\n  const getExtFile = (filename) => {\n    let last_dot = filename.lastIndexOf(\".\");\n    return filename.slice(last_dot + 1);\n  };\n\n  const readFile = (e) => {\n    if (e !== undefined) {\n      if (e.target.files[0] !== undefined) {\n        e.preventDefault();\n        const items = [];\n        const reader = new FileReader();\n        let ext = getExtFile(e.target.files[0].name);\n        setFileName(e.target.files[0].name);\n        setFile(e.target.value);\n\n        reader.onload = async (e) => {\n          setIsLoading(true);\n          console.log(ext);\n          switch (ext) {\n            case \"txt\":\n              console.log(\"text\");\n              const text = e.target.result.split(/\\r\\n|\\n/);\n              let weight = parseInt(text[0]);\n              text.forEach((line, index) => {\n                //console.log(line);\n                if (index !== 0) {\n                  const cell = line.split(\" \");\n\n                  const stock = cell[2] % 1 === 0 ? cell[2] : \"\";\n                  let name = \"\";\n                  if (stock !== \"\") {\n                    cell.slice(3).forEach((t) => {\n                      name += t + \" \";\n                    });\n                  } else {\n                    cell.slice(2).forEach((t) => {\n                      name += t + \" \";\n                    });\n                  }\n                  items.push({\n                    name: name.trim(),\n                    value: cell[0],\n                    weight: cell[1],\n                    stock: stock,\n                    qty: \"\",\n                    time: \"\",\n                  });\n                }\n              });\n              console.log(items);\n              setInputFile(weight, items);\n              break;\n\n            case \"xlsx\":\n              console.log(\"excel\");\n\n              /* Parse data */\n              const bstr = e.target.result;\n              const wb = XLSX.read(bstr, { type: \"binary\" });\n              /* Get first worksheet */\n              const wsname = wb.SheetNames[0];\n              const ws = wb.Sheets[wsname];\n              /* Convert array of arrays */\n              const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\n              /* Update state */\n              console.log(\"Data>>>\" + data);\n              console.log(convertToJson(data));\n              //setInputFile(0, convertToJson(data));\n              break;\n          }\n\n          setIsLoading(false);\n        };\n        ext === \"xlsx\" && reader.readAsBinaryString(e.target.files[0]);\n        ext === \"text\" && reader.readAsText(e.target.files[0]);\n      }\n    }\n  };\n\n  const convertToJson = (csv) => {\n    var lines = csv.split(\"\\n\");\n\n    var result = [];\n\n    var headers = lines[0].split(\",\");\n\n    for (var i = 1; i < lines.length; i++) {\n      var obj = {};\n      var currentline = lines[i].split(\",\");\n\n      for (var j = 0; j < headers.length; j++) {\n        obj[headers[j]] = currentline[j];\n      }\n\n      result.push(obj);\n    }\n\n    //return result; //JavaScript object\n    return JSON.stringify(result); //JSON\n  };\n\n  return (\n    <FormGroup>\n      <legend>File</legend>\n      <Label\n        for=\"file\"\n        // className=\"sd-file-choose btn btn-primary disabled\"\n        className={classNames(\"sd-file-choose btn btn-primary\", {\n          disabled: disabled,\n        })}\n      >\n        <FontAwesomeIcon icon=\"file-upload\" /> Upload\n      </Label>\n\n      <Input\n        type=\"file\"\n        name=\"file\"\n        id=\"file\"\n        onChange={(e) => readFile(e)}\n        style={{ display: \"none\" }}\n        value={file}\n        disabled={disabled}\n      />\n      <br></br>\n      <Label>{fileNames}</Label>\n    </FormGroup>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}