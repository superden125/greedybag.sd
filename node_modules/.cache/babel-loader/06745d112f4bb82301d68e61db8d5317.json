{"ast":null,"code":"var _jsxFileName = \"/home/sd/HK1-2020-2021/NLCS/balo/demo2/src/components/Items/InputFile.js\";\nimport React from \"react\";\nimport classNames from \"classnames\";\nimport * as XLSX from \"xlsx\";\nimport { FormGroup, Input, Label } from \"reactstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nexport default function InputFile(props) {\n  const {\n    setFileName,\n    fileNames,\n    setIsLoading,\n    setInputFile,\n    file,\n    setFile,\n    disabled\n  } = props;\n\n  const getExtFile = filename => {\n    let last_dot = filename.lastIndexOf(\".\");\n    return filename.slice(last_dot + 1);\n  };\n\n  const readFileTxt = reader => {\n    const items = [];\n\n    reader.onload = async e => {\n      setIsLoading(true);\n      console.log(\"load\");\n      const text = e.target.result.split(/\\r\\n|\\n/);\n      let weight = parseInt(text[0]);\n      text.forEach((line, index) => {\n        //console.log(line);\n        if (index !== 0) {\n          const cell = line.split(\" \");\n          const stock = cell[2] % 1 === 0 ? cell[2] : \"\";\n          let name = \"\";\n\n          if (stock !== \"\") {\n            cell.slice(3).forEach(t => {\n              name += t + \" \";\n            });\n          } else {\n            cell.slice(2).forEach(t => {\n              name += t + \" \";\n            });\n          }\n\n          items.push({\n            name: name.trim(),\n            value: cell[0],\n            weight: cell[1],\n            stock: stock,\n            qty: \"\",\n            time: \"\"\n          });\n        }\n      });\n      console.log(items);\n      setInputFile(weight, items);\n      setIsLoading(false);\n    }; //reader.readAsText(e.target.files[0]);\n\n  };\n\n  const readFileXlsx = reader => {\n    const items = [];\n\n    reader.onload = async e => {\n      setIsLoading(true);\n      console.log(\"load\");\n      /* Parse data */\n\n      const bstr = e.target.result;\n      const wb = XLSX.read(bstr, {\n        type: \"binary\"\n      });\n      /* Get first worksheet */\n\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n\n      const data = XLSX.utils.sheet_to_json(ws, {\n        header: 1\n      });\n      /* Update state */\n\n      console.log(data);\n\n      for (let i = 1; i < data.length; i++) {\n        items.push({\n          name: data[i][0].trim(),\n          value: data[i][1],\n          weight: data[i][2],\n          stock: data[i][3] % 1 === 0 ? data[i][3] : \"\",\n          qty: \"\",\n          time: \"\"\n        });\n      }\n\n      setInputFile(weight, items);\n      setIsLoading(false);\n    };\n  };\n\n  const readFile = e => {\n    if (e !== undefined) {\n      if (e.target.files[0] !== undefined) {\n        e.preventDefault();\n        const items = [];\n        const reader = new FileReader();\n        let ext = getExtFile(e.target.files[0].name);\n        setFileName(e.target.files[0].name);\n        setFile(e.target.value);\n\n        switch (ext) {\n          case \"txt\":\n            readFileTxt(reader);\n            break;\n\n          case \"xlsx\":\n            readFileXlsx(reader);\n            break;\n        }\n\n        ext === \"xlsx\" && reader.readAsBinaryString(e.target.files[0]);\n        ext === \"txt\" && reader.readAsText(e.target.files[0]);\n      }\n    }\n  };\n\n  const convertToJson = csv => {\n    var lines = csv.split(\"\\n\");\n    var result = [];\n    var headers = lines[0].split(\",\");\n\n    for (var i = 1; i < lines.length; i++) {\n      var obj = {};\n      var currentline = lines[i].split(\",\");\n\n      for (var j = 0; j < headers.length; j++) {\n        obj[headers[j]] = currentline[j];\n      }\n\n      result.push(obj);\n    } //return result; //JavaScript object\n\n\n    return JSON.stringify(result); //JSON\n  };\n\n  return /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"legend\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }, \"File\"), /*#__PURE__*/React.createElement(Label, {\n    for: \"file\" // className=\"sd-file-choose btn btn-primary disabled\"\n    ,\n    className: classNames(\"sd-file-choose btn btn-primary\", {\n      disabled: disabled\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: \"file-upload\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }\n  }), \" Upload\"), /*#__PURE__*/React.createElement(Input, {\n    type: \"file\",\n    name: \"file\",\n    id: \"file\",\n    onChange: e => readFile(e),\n    style: {\n      display: \"none\"\n    },\n    value: file,\n    disabled: disabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }\n  }, fileNames));\n}","map":{"version":3,"sources":["/home/sd/HK1-2020-2021/NLCS/balo/demo2/src/components/Items/InputFile.js"],"names":["React","classNames","XLSX","FormGroup","Input","Label","FontAwesomeIcon","InputFile","props","setFileName","fileNames","setIsLoading","setInputFile","file","setFile","disabled","getExtFile","filename","last_dot","lastIndexOf","slice","readFileTxt","reader","items","onload","e","console","log","text","target","result","split","weight","parseInt","forEach","line","index","cell","stock","name","t","push","trim","value","qty","time","readFileXlsx","bstr","wb","read","type","wsname","SheetNames","ws","Sheets","data","utils","sheet_to_json","header","i","length","readFile","undefined","files","preventDefault","FileReader","ext","readAsBinaryString","readAsText","convertToJson","csv","lines","headers","obj","currentline","j","JSON","stringify","display"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport classNames from \"classnames\";\nimport * as XLSX from \"xlsx\";\nimport { FormGroup, Input, Label } from \"reactstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nexport default function InputFile(props) {\n  const {\n    setFileName,\n    fileNames,\n    setIsLoading,\n    setInputFile,\n    file,\n    setFile,\n    disabled,\n  } = props;\n\n  const getExtFile = (filename) => {\n    let last_dot = filename.lastIndexOf(\".\");\n    return filename.slice(last_dot + 1);\n  };\n\n  const readFileTxt = (reader) => {\n    const items = [];\n\n    reader.onload = async (e) => {\n      setIsLoading(true);\n      console.log(\"load\");\n      const text = e.target.result.split(/\\r\\n|\\n/);\n      let weight = parseInt(text[0]);\n      text.forEach((line, index) => {\n        //console.log(line);\n        if (index !== 0) {\n          const cell = line.split(\" \");\n\n          const stock = cell[2] % 1 === 0 ? cell[2] : \"\";\n          let name = \"\";\n          if (stock !== \"\") {\n            cell.slice(3).forEach((t) => {\n              name += t + \" \";\n            });\n          } else {\n            cell.slice(2).forEach((t) => {\n              name += t + \" \";\n            });\n          }\n          items.push({\n            name: name.trim(),\n            value: cell[0],\n            weight: cell[1],\n            stock: stock,\n            qty: \"\",\n            time: \"\",\n          });\n        }\n      });\n      console.log(items);\n      setInputFile(weight, items);\n\n      setIsLoading(false);\n    };\n    //reader.readAsText(e.target.files[0]);\n  };\n\n  const readFileXlsx = (reader) => {\n    const items = [];\n    reader.onload = async (e) => {\n      setIsLoading(true);\n      console.log(\"load\");\n\n      /* Parse data */\n      const bstr = e.target.result;\n      const wb = XLSX.read(bstr, { type: \"binary\" });\n      /* Get first worksheet */\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n      const data = XLSX.utils.sheet_to_json(ws, { header: 1 });\n      /* Update state */\n      console.log(data);\n\n      for (let i = 1; i < data.length; i++) {\n        items.push({\n          name: data[i][0].trim(),\n          value: data[i][1],\n          weight: data[i][2],\n          stock: data[i][3] % 1 === 0 ? data[i][3] : \"\",\n          qty: \"\",\n          time: \"\",\n        });\n      }\n      setInputFile(weight, items);\n      setIsLoading(false);\n    };\n  };\n\n  const readFile = (e) => {\n    if (e !== undefined) {\n      if (e.target.files[0] !== undefined) {\n        e.preventDefault();\n        const items = [];\n        const reader = new FileReader();\n        let ext = getExtFile(e.target.files[0].name);\n        setFileName(e.target.files[0].name);\n        setFile(e.target.value);\n\n        switch (ext) {\n          case \"txt\":\n            readFileTxt(reader);\n            break;\n\n          case \"xlsx\":\n            readFileXlsx(reader);\n            break;\n        }\n\n        ext === \"xlsx\" && reader.readAsBinaryString(e.target.files[0]);\n        ext === \"txt\" && reader.readAsText(e.target.files[0]);\n      }\n    }\n  };\n\n  const convertToJson = (csv) => {\n    var lines = csv.split(\"\\n\");\n\n    var result = [];\n\n    var headers = lines[0].split(\",\");\n\n    for (var i = 1; i < lines.length; i++) {\n      var obj = {};\n      var currentline = lines[i].split(\",\");\n\n      for (var j = 0; j < headers.length; j++) {\n        obj[headers[j]] = currentline[j];\n      }\n\n      result.push(obj);\n    }\n\n    //return result; //JavaScript object\n    return JSON.stringify(result); //JSON\n  };\n\n  return (\n    <FormGroup>\n      <legend>File</legend>\n      <Label\n        for=\"file\"\n        // className=\"sd-file-choose btn btn-primary disabled\"\n        className={classNames(\"sd-file-choose btn btn-primary\", {\n          disabled: disabled,\n        })}\n      >\n        <FontAwesomeIcon icon=\"file-upload\" /> Upload\n      </Label>\n\n      <Input\n        type=\"file\"\n        name=\"file\"\n        id=\"file\"\n        onChange={(e) => readFile(e)}\n        style={{ display: \"none\" }}\n        value={file}\n        disabled={disabled}\n      />\n      <br></br>\n      <Label>{fileNames}</Label>\n    </FormGroup>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}