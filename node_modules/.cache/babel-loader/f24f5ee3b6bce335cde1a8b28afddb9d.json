{"ast":null,"code":"var _jsxFileName = \"/home/sd/HK1-2020-2021/NLCS/balo/demo2/src/components/Items/InputFile.js\";\nimport React from \"react\";\nimport { Input } from \"reactstrap\";\nexport default function InputFile(props) {\n  const {\n    setWeightFile,\n    setItemsFile\n  } = props;\n\n  const readFile = e => {\n    e.preventDefault();\n    const items = [];\n    const reader = new FileReader();\n\n    reader.onload = async e => {\n      const text = e.target.result.split(/\\r\\n|\\n/);\n      setWeightFile(parseInt(text[0]));\n      text.forEach((line, index) => {\n        //console.log(line);\n        if (index !== 0) {\n          const cell = line.split(\" \");\n          const stock = cell[2] % 1 === 0 ? cell[2] : \"\";\n          let name = \"\";\n\n          if (stock !== \"\") {\n            cell.slice(3).forEach(t => {\n              name += t + \" \";\n            });\n          } else {\n            cell.slice(2).forEach(t => {\n              name += t + \" \";\n            });\n          }\n\n          items[index - 1] = {\n            value: cell[0],\n            weight: cell[1],\n            stock: stock,\n            name: name.trim(),\n            qty: \"\",\n            time: \"\"\n          };\n        }\n      });\n      console.log(items); //setItemsFile(items);\n    };\n\n    reader.readAsText(e.target.files[0]);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"file\",\n    name: \"file\",\n    onChange: e => readFile(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/home/sd/HK1-2020-2021/NLCS/balo/demo2/src/components/Items/InputFile.js"],"names":["React","Input","InputFile","props","setWeightFile","setItemsFile","readFile","e","preventDefault","items","reader","FileReader","onload","text","target","result","split","parseInt","forEach","line","index","cell","stock","name","slice","t","value","weight","trim","qty","time","console","log","readAsText","files"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,YAAtB;AAEA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACvC,QAAM;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,MAAkCF,KAAxC;;AAEA,QAAMG,QAAQ,GAAIC,CAAD,IAAO;AACtBA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAMC,KAAK,GAAG,EAAd;AACA,UAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AAEAD,IAAAA,MAAM,CAACE,MAAP,GAAgB,MAAOL,CAAP,IAAa;AAC3B,YAAMM,IAAI,GAAGN,CAAC,CAACO,MAAF,CAASC,MAAT,CAAgBC,KAAhB,CAAsB,SAAtB,CAAb;AACAZ,MAAAA,aAAa,CAACa,QAAQ,CAACJ,IAAI,CAAC,CAAD,CAAL,CAAT,CAAb;AACAA,MAAAA,IAAI,CAACK,OAAL,CAAa,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC5B;AACA,YAAIA,KAAK,KAAK,CAAd,EAAiB;AACf,gBAAMC,IAAI,GAAGF,IAAI,CAACH,KAAL,CAAW,GAAX,CAAb;AAEA,gBAAMM,KAAK,GAAGD,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAV,KAAgB,CAAhB,GAAoBA,IAAI,CAAC,CAAD,CAAxB,GAA8B,EAA5C;AACA,cAAIE,IAAI,GAAG,EAAX;;AACA,cAAID,KAAK,KAAK,EAAd,EAAkB;AAChBD,YAAAA,IAAI,CAACG,KAAL,CAAW,CAAX,EAAcN,OAAd,CAAuBO,CAAD,IAAO;AAC3BF,cAAAA,IAAI,IAAIE,CAAC,GAAG,GAAZ;AACD,aAFD;AAGD,WAJD,MAIO;AACLJ,YAAAA,IAAI,CAACG,KAAL,CAAW,CAAX,EAAcN,OAAd,CAAuBO,CAAD,IAAO;AAC3BF,cAAAA,IAAI,IAAIE,CAAC,GAAG,GAAZ;AACD,aAFD;AAGD;;AACDhB,UAAAA,KAAK,CAACW,KAAK,GAAG,CAAT,CAAL,GAAmB;AACjBM,YAAAA,KAAK,EAAEL,IAAI,CAAC,CAAD,CADM;AAEjBM,YAAAA,MAAM,EAAEN,IAAI,CAAC,CAAD,CAFK;AAGjBC,YAAAA,KAAK,EAAEA,KAHU;AAIjBC,YAAAA,IAAI,EAAEA,IAAI,CAACK,IAAL,EAJW;AAKjBC,YAAAA,GAAG,EAAE,EALY;AAMjBC,YAAAA,IAAI,EAAE;AANW,WAAnB;AAQD;AACF,OAzBD;AA0BAC,MAAAA,OAAO,CAACC,GAAR,CAAYvB,KAAZ,EA7B2B,CA8B3B;AACD,KA/BD;;AAgCAC,IAAAA,MAAM,CAACuB,UAAP,CAAkB1B,CAAC,CAACO,MAAF,CAASoB,KAAT,CAAe,CAAf,CAAlB;AACD,GAtCD;;AAwCA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,MAAxB;AAA+B,IAAA,QAAQ,EAAG3B,CAAD,IAAOD,QAAQ,CAACC,CAAD,CAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD","sourcesContent":["import React from \"react\";\nimport { Input } from \"reactstrap\";\n\nexport default function InputFile(props) {\n  const { setWeightFile, setItemsFile } = props;\n\n  const readFile = (e) => {\n    e.preventDefault();\n    const items = [];\n    const reader = new FileReader();\n\n    reader.onload = async (e) => {\n      const text = e.target.result.split(/\\r\\n|\\n/);\n      setWeightFile(parseInt(text[0]));\n      text.forEach((line, index) => {\n        //console.log(line);\n        if (index !== 0) {\n          const cell = line.split(\" \");\n\n          const stock = cell[2] % 1 === 0 ? cell[2] : \"\";\n          let name = \"\";\n          if (stock !== \"\") {\n            cell.slice(3).forEach((t) => {\n              name += t + \" \";\n            });\n          } else {\n            cell.slice(2).forEach((t) => {\n              name += t + \" \";\n            });\n          }\n          items[index - 1] = {\n            value: cell[0],\n            weight: cell[1],\n            stock: stock,\n            name: name.trim(),\n            qty: \"\",\n            time: \"\",\n          };\n        }\n      });\n      console.log(items);\n      //setItemsFile(items);\n    };\n    reader.readAsText(e.target.files[0]);\n  };\n\n  return (\n    <div>\n      <Input type=\"file\" name=\"file\" onChange={(e) => readFile(e)} />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}