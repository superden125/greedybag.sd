{"ast":null,"code":"var _jsxFileName = \"/home/sd/HK1-2020-2021/NLCS/balo/demo2/src/components/Items/InputFile.js\";\nimport React from \"react\";\nimport classNames from \"classnames\";\nimport * as XLSX from \"xlsx\";\nimport { FormGroup, Input, Label } from \"reactstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nexport default function InputFile(props) {\n  const {\n    setFileName,\n    fileNames,\n    setIsLoading,\n    setInputFile,\n    file,\n    setFile,\n    disabled\n  } = props;\n\n  const getExtFile = filename => {\n    let last_dot = filename.lastIndexOf(\".\");\n    return filename.slice(last_dot + 1);\n  };\n\n  const readFileTxt = reader => {\n    const items = [];\n\n    reader.onload = async e => {\n      setIsLoading(true);\n      console.log(\"load\");\n      const text = e.target.result.split(/\\r\\n|\\n/);\n      let weight = parseInt(text[0]);\n      text.forEach((line, index) => {\n        //console.log(line);\n        if (index !== 0) {\n          const cell = line.split(\" \");\n          const stock = cell[2] % 1 === 0 ? cell[2] : \"\";\n          let name = \"\";\n\n          if (stock !== \"\") {\n            cell.slice(3).forEach(t => {\n              name += t + \" \";\n            });\n          } else {\n            cell.slice(2).forEach(t => {\n              name += t + \" \";\n            });\n          }\n\n          items.push({\n            name: name.trim(),\n            value: cell[0],\n            weight: cell[1],\n            stock: stock,\n            qty: \"\",\n            time: \"\"\n          });\n        }\n      });\n      console.log(items);\n      setInputFile(weight, items);\n      setIsLoading(false);\n    }; //reader.readAsText(e.target.files[0]);\n\n  };\n\n  const readFile = e => {\n    if (e !== undefined) {\n      if (e.target.files[0] !== undefined) {\n        e.preventDefault();\n        const items = [];\n        const reader = new FileReader();\n        let ext = getExtFile(e.target.files[0].name);\n        setFileName(e.target.files[0].name);\n        setFile(e.target.value);\n        readFileTxt(reader); // reader.onload = async (e) => {\n        //   setIsLoading(true);\n        //   console.log(ext);\n        //   switch (ext) {\n        //     case \"txt\":\n        //       console.log(\"text\");\n        //       const text = e.target.result.split(/\\r\\n|\\n/);\n        //       let weight = parseInt(text[0]);\n        //       text.forEach((line, index) => {\n        //         //console.log(line);\n        //         if (index !== 0) {\n        //           const cell = line.split(\" \");\n        //           const stock = cell[2] % 1 === 0 ? cell[2] : \"\";\n        //           let name = \"\";\n        //           if (stock !== \"\") {\n        //             cell.slice(3).forEach((t) => {\n        //               name += t + \" \";\n        //             });\n        //           } else {\n        //             cell.slice(2).forEach((t) => {\n        //               name += t + \" \";\n        //             });\n        //           }\n        //           items.push({\n        //             name: name.trim(),\n        //             value: cell[0],\n        //             weight: cell[1],\n        //             stock: stock,\n        //             qty: \"\",\n        //             time: \"\",\n        //           });\n        //         }\n        //       });\n        //       console.log(items);\n        //       setInputFile(weight, items);\n        //       break;\n        //     case \"xlsx\":\n        //       console.log(\"excel\");\n        //       /* Parse data */\n        //       const bstr = e.target.result;\n        //       const wb = XLSX.read(bstr, { type: \"binary\" });\n        //       /* Get first worksheet */\n        //       const wsname = wb.SheetNames[0];\n        //       const ws = wb.Sheets[wsname];\n        //       /* Convert array of arrays */\n        //       const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\n        //       /* Update state */\n        //       console.log(\"Data>>>\" + data);\n        //       console.log(convertToJson(data));\n        //       //setInputFile(0, convertToJson(data));\n        //       break;\n        //   }\n        //   setIsLoading(false);\n        // };\n\n        ext === \"xlsx\" && reader.readAsBinaryString(e.target.files[0]);\n        ext === \"txt\" && reader.readAsText(e.target.files[0]);\n      }\n    }\n  };\n\n  const convertToJson = csv => {\n    var lines = csv.split(\"\\n\");\n    var result = [];\n    var headers = lines[0].split(\",\");\n\n    for (var i = 1; i < lines.length; i++) {\n      var obj = {};\n      var currentline = lines[i].split(\",\");\n\n      for (var j = 0; j < headers.length; j++) {\n        obj[headers[j]] = currentline[j];\n      }\n\n      result.push(obj);\n    } //return result; //JavaScript object\n\n\n    return JSON.stringify(result); //JSON\n  };\n\n  return /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"legend\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }\n  }, \"File\"), /*#__PURE__*/React.createElement(Label, {\n    for: \"file\" // className=\"sd-file-choose btn btn-primary disabled\"\n    ,\n    className: classNames(\"sd-file-choose btn btn-primary\", {\n      disabled: disabled\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: \"file-upload\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }\n  }), \" Upload\"), /*#__PURE__*/React.createElement(Input, {\n    type: \"file\",\n    name: \"file\",\n    id: \"file\",\n    onChange: e => readFile(e),\n    style: {\n      display: \"none\"\n    },\n    value: file,\n    disabled: disabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }\n  }, fileNames));\n}","map":{"version":3,"sources":["/home/sd/HK1-2020-2021/NLCS/balo/demo2/src/components/Items/InputFile.js"],"names":["React","classNames","XLSX","FormGroup","Input","Label","FontAwesomeIcon","InputFile","props","setFileName","fileNames","setIsLoading","setInputFile","file","setFile","disabled","getExtFile","filename","last_dot","lastIndexOf","slice","readFileTxt","reader","items","onload","e","console","log","text","target","result","split","weight","parseInt","forEach","line","index","cell","stock","name","t","push","trim","value","qty","time","readFile","undefined","files","preventDefault","FileReader","ext","readAsBinaryString","readAsText","convertToJson","csv","lines","headers","i","length","obj","currentline","j","JSON","stringify","display"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport classNames from \"classnames\";\nimport * as XLSX from \"xlsx\";\nimport { FormGroup, Input, Label } from \"reactstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nexport default function InputFile(props) {\n  const {\n    setFileName,\n    fileNames,\n    setIsLoading,\n    setInputFile,\n    file,\n    setFile,\n    disabled,\n  } = props;\n\n  const getExtFile = (filename) => {\n    let last_dot = filename.lastIndexOf(\".\");\n    return filename.slice(last_dot + 1);\n  };\n\n  const readFileTxt = (reader) => {\n    const items = [];\n\n    reader.onload = async (e) => {\n      setIsLoading(true);\n      console.log(\"load\");\n      const text = e.target.result.split(/\\r\\n|\\n/);\n      let weight = parseInt(text[0]);\n      text.forEach((line, index) => {\n        //console.log(line);\n        if (index !== 0) {\n          const cell = line.split(\" \");\n\n          const stock = cell[2] % 1 === 0 ? cell[2] : \"\";\n          let name = \"\";\n          if (stock !== \"\") {\n            cell.slice(3).forEach((t) => {\n              name += t + \" \";\n            });\n          } else {\n            cell.slice(2).forEach((t) => {\n              name += t + \" \";\n            });\n          }\n          items.push({\n            name: name.trim(),\n            value: cell[0],\n            weight: cell[1],\n            stock: stock,\n            qty: \"\",\n            time: \"\",\n          });\n        }\n      });\n      console.log(items);\n      setInputFile(weight, items);\n\n      setIsLoading(false);\n    };\n    //reader.readAsText(e.target.files[0]);\n  };\n\n  const readFile = (e) => {\n    if (e !== undefined) {\n      if (e.target.files[0] !== undefined) {\n        e.preventDefault();\n        const items = [];\n        const reader = new FileReader();\n        let ext = getExtFile(e.target.files[0].name);\n        setFileName(e.target.files[0].name);\n        setFile(e.target.value);\n\n        readFileTxt(reader);\n\n        // reader.onload = async (e) => {\n        //   setIsLoading(true);\n        //   console.log(ext);\n        //   switch (ext) {\n        //     case \"txt\":\n        //       console.log(\"text\");\n        //       const text = e.target.result.split(/\\r\\n|\\n/);\n        //       let weight = parseInt(text[0]);\n        //       text.forEach((line, index) => {\n        //         //console.log(line);\n        //         if (index !== 0) {\n        //           const cell = line.split(\" \");\n\n        //           const stock = cell[2] % 1 === 0 ? cell[2] : \"\";\n        //           let name = \"\";\n        //           if (stock !== \"\") {\n        //             cell.slice(3).forEach((t) => {\n        //               name += t + \" \";\n        //             });\n        //           } else {\n        //             cell.slice(2).forEach((t) => {\n        //               name += t + \" \";\n        //             });\n        //           }\n        //           items.push({\n        //             name: name.trim(),\n        //             value: cell[0],\n        //             weight: cell[1],\n        //             stock: stock,\n        //             qty: \"\",\n        //             time: \"\",\n        //           });\n        //         }\n        //       });\n        //       console.log(items);\n        //       setInputFile(weight, items);\n        //       break;\n\n        //     case \"xlsx\":\n        //       console.log(\"excel\");\n\n        //       /* Parse data */\n        //       const bstr = e.target.result;\n        //       const wb = XLSX.read(bstr, { type: \"binary\" });\n        //       /* Get first worksheet */\n        //       const wsname = wb.SheetNames[0];\n        //       const ws = wb.Sheets[wsname];\n        //       /* Convert array of arrays */\n        //       const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\n        //       /* Update state */\n        //       console.log(\"Data>>>\" + data);\n        //       console.log(convertToJson(data));\n        //       //setInputFile(0, convertToJson(data));\n        //       break;\n        //   }\n\n        //   setIsLoading(false);\n        // };\n        ext === \"xlsx\" && reader.readAsBinaryString(e.target.files[0]);\n        ext === \"txt\" && reader.readAsText(e.target.files[0]);\n      }\n    }\n  };\n\n  const convertToJson = (csv) => {\n    var lines = csv.split(\"\\n\");\n\n    var result = [];\n\n    var headers = lines[0].split(\",\");\n\n    for (var i = 1; i < lines.length; i++) {\n      var obj = {};\n      var currentline = lines[i].split(\",\");\n\n      for (var j = 0; j < headers.length; j++) {\n        obj[headers[j]] = currentline[j];\n      }\n\n      result.push(obj);\n    }\n\n    //return result; //JavaScript object\n    return JSON.stringify(result); //JSON\n  };\n\n  return (\n    <FormGroup>\n      <legend>File</legend>\n      <Label\n        for=\"file\"\n        // className=\"sd-file-choose btn btn-primary disabled\"\n        className={classNames(\"sd-file-choose btn btn-primary\", {\n          disabled: disabled,\n        })}\n      >\n        <FontAwesomeIcon icon=\"file-upload\" /> Upload\n      </Label>\n\n      <Input\n        type=\"file\"\n        name=\"file\"\n        id=\"file\"\n        onChange={(e) => readFile(e)}\n        style={{ display: \"none\" }}\n        value={file}\n        disabled={disabled}\n      />\n      <br></br>\n      <Label>{fileNames}</Label>\n    </FormGroup>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}